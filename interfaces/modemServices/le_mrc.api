//--------------------------------------------------------------------------------------------------
/**
 * @page c_mrc Modem Radio Control
 *
 * @ref le_mrc_interface.h "API Reference"
 *
 * <HR>
 *
 * The Modem Radio Control (MRC) APIs is used to control cellular network environments.
 *
 * It's important for many M2M apps to know details about cellular network environments (like
 * network registration and signal quality).
 * It allows you to limit some M2M services based on the reliability of the network environment, and
 * provides information to control power consumption (power on or shutdown the radio module).
 *
 * @section le_mrc_binding IPC interfaces binding
 *
 * All the functions of this API are provided by the @b modemService service.
 *
 * Here's a code sample binding to modem services:
 * @verbatim
   bindings:
   {
      clientExe.clientComponent.le_mrc -> modemService.le_mrc
   }
   @endverbatim
 *
 * @section le_mrc_power Radio Power Management
 * le_mrc_SetRadioPower() API allows the application to power up or shutdown the radio module.
 *
 * le_mrc_GetRadioPower() API displays radio module power state.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mrcRadioPower
 *
 * @section le_mrc_configuration Radio Configuration preferences
 *
 * The following functions let you configure and retrieve the radio configuration preferences:
 * le_mrc_SetAutomaticRegisterMode(), le_mrc_SetManualRegisterMode() and le_mrc_GetRegisterMode()
 * let you set/get the selected Scan mode.
 *
 * le_mrc_SetBandPreferences(), le_mrc_GetBandPreferences() let you set/get the 2G/3G band
 * preferences by using a bit mask built with @c le_mrc_BandBitMask_t
 *
 * The 2G/3G band preferences can be:
 * - Band-Class-0-A-System
 * - Band-Class-0-B-System
 * - Band-Class-1-All-Blocks
 * - Band-Class-2-Placeholder
 * - Band-Class-3-A-System
 * - Band-Class-4-All-Blocks
 * - Band-Class-5-All-Blocks
 * - Band-Class-6
 * - Band-Class-7
 * - Band-Class-8
 * - Band-Class-9
 * - Band-Class-10
 * - Band-Class-11
 * - Band-Class-12
 * - Band-Class-13
 * - Band-Class-14
 * - Band-Class-15
 * - Band-Class-16
 * - Band-Class-17
 * - Band-Class-18
 * - Band-Class-19
 * - GSM-DCS-1800
 * - E-GSM-900 (for Extended GSM 900 band)
 * - Primary-GSM-900
 * - GSM-450
 * - GSM-480
 * - GSM-750
 * - GSM-850
 * - GSMR-900 (for GSM Railways GSM 900 band)
 * - GSM-PCS-1900
 * - WCDMA-EU-J-CH-IMT-2100 (for WCDMA Europe, Japan, and China IMT 2100 band)
 * - WCDMA-US-PCS-1900 (for WCDMA U.S. PCS 1900 band)
 * - WCDMA-EU-CH-DCS-1800 (for WCDMA Europe and China DCS 1800 band)
 * - WCDMA-US-1700 (for WCDMA U.S. 1700 band)
 * - WCDMA-US-850 (for WCDMA U.S. 850 band)
 * - WCDMA-J-800 (for WCDMA Japan 800 band)
 * - WCDMA-EU-2600 (for WCDMA Europe 2600 band)
 * - WCDMA-EU-J-900 (for WCDMA Europe and Japan 900 band)
 * - WCDMA-J-1700 (for WCDMA Japan 1700 band)
 *
 * le_mrc_SetLteBandPreferences(), le_mrc_GetLteBandPreferences() let you set/get the LTE band
 * preferences by using a bit mask built with @c le_mrc_LteBandBitMask_t.
 *
 * The LTE band preferences can be 0 to 43 except 15, 16, 22, 23, and 26 to 32.
 *
 * le_mrc_SetTdScdmaBandPreferences(), le_mrc_GetTdScdmaBandPreferences() let you set/get the
 * TD-SCDMA band preferences by using a bit mask built with @c le_mrc_TdScdmaBandBitMask_t
 *
 * The TD-SCDMA band preferences can be 'A' to 'F'
 *
 * @warning Ensure to check the supported preferences for your specific platform.
 *
 * le_mrc_AddPreferredOperator() , le_mrc_RemovePreferredOperator() to add/remove a preferred
 * operator by specifying the MCC/MNC and the Radio Access Technology.
 *
 * le_mrc_GetPreferredOperatorsList(), le_mrc_GetFirstPreferredOperator(),
 * le_mrc_GetNextPreferredOperator(), le_mrc_DeletePreferredOperatorsList(),
 * le_mrc_GetPreferredOperatorDetails() let you retrieve a list of the selected preferred
 * operators and get their details.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mrcRadioConfigurationPreferences
 *
 * @section le_mrc_capabilities Radio Capabilities
 *
 * le_mrc_GetBandCapabilities() let you get the 2G/3G band capabilities by retrieving a bit mask
 * built with @c le_mrc_BandBitMask_t
 *
 * le_mrc_GetLteBandCapabilities() let you get the LTE band capabilities by retrieving a bit mask
 * built with @c le_mrc_LteBandBitMask_t
 *
 * le_mrc_GetTdScdmaBandCapabilities() let you get the TD-SCDMA band capabilities by retrieving
 * a bit mask built with @c le_mrc_TdScdmaBandBitMask_t
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mrcBandCapabilities
 *
 * @section le_mrc_rat Radio Access Technology (RAT)
 * le_mrc_GetRadioAccessTechInUse() API retrieves the current active Radio Access Technology.
 *
 * The application can register a handler function to retrieve the Radio Access Technology each time
 * the RAT changes.
 *
 * le_mrc_AddRatChangeHandler() API installs a RAT change handler.
 *
 * le_mrc_RemoveRatChangeHandler() API uninstalls the handler function.
 *
 * le_mrc_SetRatPreferences(), le_mrc_GetRatPreferences() let you set/get the Radio Access
 * Technology preferences by using a bit mask built with @c le_mrc_RatBitMask_t.
 *
 * The Radio Access Technology preferences can be:
 * - CDMA (CDMA2000-1X + CDMA2000-HRPD)
 * - GSM
 * - UMTS (UMTS + TD-SCDMA)
 * - LTE
 *
 * @note LE_MRC_BITMASK_RAT_ALL value can be used to select the RAT in automatic mode.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mrcRAT
 *
 * @section le_mrc_registration Network Registration
 * le_mrc_GetNetRegState() API retrieves the radio module network registration status.
 *
 * The application can register a handler function to retrieve the registration status each time the
 * registration state changes.
 *
 * le_mrc_AddNetRegStateEventHandler() API installs a registration state handler.
 *
 * le_mrc_RemoveNetRegStateEventHandler() API uninstalls the handler function.
 * @note If only one handler is registered, the le_mrc_RemoveNetRegStateHandler() API
 *       resets the registration mode to its original value before any handler functions were added.
 *
 * le_mrc_SetManualRegisterMode() API registers on a cellular network.
 *
 * Call le_mrc_SetManualRegisterModeAsync() function to set the manual registration mode
 *  asynchronously. The function is not blocking. The response will be returned with the
 *  @c le_mrc_ManualSelectionHandlerFunc_t handler function.
 *
 * When the network registration fails, the platform specific network registration error code can
 * be known by using le_mrc_GetPlatformSpecificRegistrationErrorCode() (refer to your platform
 * documentation for further details).
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mrcNetworkRegistration
 *
 * @section le_mrc_signal Signal Quality
 *
 * le_mrc_GetSignalQual() retrieves the received signal strength details.
 *
 * You must call le_mrc_MeasureSignalMetrics() to measure the signal metrics of the serving cell (aka
 * the 'serving' cell). It returns a reference of le_mrc_MetricsRef_t type.
 *
 * When the signal metrics are no longer needed, you must call le_mrc_DeleteSignalMetrics() to free
 * all allocated ressources associated with the Metrics object.
 *
 * le_mrc_GetRatOfSignalMetrics() returns the Radio Access Technology of the signal measures.
 *
 * le_mrc_GetGsmSignalMetrics() the signal strength in dBm and the bit error rate measured on GSM
 * network.
 *
 * le_mrc_GetUmtsSignalMetrics() returns the signal metrics measured on UMTS network.
 *
 * le_mrc_GetLteSignalMetrics() returns the signal metrics measured on LTE network.
 *
 * le_mrc_GetCdmaSignalMetrics() returns the signal metrics measured on CDMA network.
 *
 * The application can register a handler function to get notifications when the signal strength
 * changes of a certain threshold value.
 *
 * le_mrc_AddSignalStrengthChangeHandler() API installs a signal strength change handler.
 * The RAT, the lower-range and the upper-range thresholds must be passed as input parameters. These
 * parameters are updated each time the function is called, the previous thresholds are replaced by
 * the new ones if the function is called with the same RAT.
 *
 * @warning The threshold values must be in the allowed platform range.
 *
 * The event is notified when we cross the range limits in both direction.
 *
 * le_mrc_RemoveSignalStrengthChangeHandler() API uninstalls the handler function.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mrcQuality
 *
 * @section le_mrc_location Serving cell's location information
 *
 * le_mrc_GetServingCellId() retrieves the the serving Cell Identifier.
 *
 * le_mrc_GetServingCellLocAreaCode() retrieves the Location Area Code of the serving cell.
 *
 * le_mrc_GetServingCellLteTracAreaCode() retrieves the the Tracking Area Code of the serving cell
 * (LTE only).
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mrcLocationinformation
 *
 * @section le_mrc_network_information Current Network Information
 * le_mrc_GetCurrentNetworkName() retrieves the Current Network Name.
 * le_mrc_GetCurrentNetworkMccMnc() retrieves the Current Network PLMN information.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mrcGetCurrentNetwork
 *
 * @section le_mrc_networkScan Network Scan
 *
 * Call le_mrc_PerformCellularNetworkScan() to fill a list of all network in sight.
 * You can go through all Scan Information by calling le_mrc_GetFirstCellularNetworkScan() and
 * le_mrc_GetNextCellularNetworkScan().
 *
 * Call le_mrc_PerformCellularNetworkScanAsync() to start a network scan asynchronously. The
 * function is not blocking. The scan list reference will be returned with the handler function
 * response (@c le_mrc_CellularNetworkScanHandlerFunc_t).
 *
 * For each Scan Information, you can call:
 *
 *  - le_mrc_GetCellularNetworkMccMnc() to have the operator code.
 *  - le_mrc_GetCellularNetworkName() to get the operator name.
 *  - le_mrc_GetCellularNetworkRat() to get the radio access technology.
 *  - le_mrc_IsCellularNetworkInUse() to check if this is currently in use by the network.
 *  - le_mrc_IsCellularNetworkAvailable() to check if this is available.
 *  - le_mrc_IsCellularNetworkHome() to check if this is in home status.
 *  - le_mrc_IsCellularNetworkForbidden() to check if this is forbidden by the network.
 *
 * le_mrc_DeleteCellularNetworkScan() should be called when you do not need the list anymore.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mrcNetworkScan
 *
 * @section le_mrc_ngbr Neighboring Cells Information
 *
 * @warning The following functions do not apply to CDMA network.
 *
 * You must call le_mrc_GetNeighborCellsInfo() to retrieve the neighboring cells
 * information. It returns a reference of le_mrc_NeighborCellsRef_t type.
 *
 * When the neighboring cells information is no longer needed, you must call
 * le_mrc_DeleteNeighborCellsInfo() to free all allocated resources associated with the
 * object.
 *
 * Then, you can use the following function to get the information:
 * - le_mrc_GetFirstNeighborCellInfo() and le_mrc_GetFirstNeighborCellInfo() allow to go among
 *   the single cell information retrieved with le_mrc_GetNeighborCellsInfo(). These two functions
 *   return a reference of le_mrc_CellInfoRef_t type.
 * - le_mrc_GetNeighborCellId() gets the identifier of the cell specified with the
 *   le_mrc_CellInfoRef_t parameter (can be called for any kind of RAT).
 * - le_mrc_GetNeighborCellLocAreaCode() gets the location area code of the cell specified with the
 *   le_mrc_CellInfoRef_t parameter (can be called for any kind of RAT). 0xFFFF value is returned
 *   if the value is not available.
 * - le_mrc_GetNeighborCellRxLevel() gets the signal strength (in dBm) of the cell specified with
 *   the le_mrc_CellInfoRef_t parameter (can be called for any kind of RAT).
 * - le_mrc_GetNeighborCellRat() gets the Radio Access Technology of the cell specified with
 *   the le_mrc_CellInfoRef_t parameter.
 * - le_mrc_GetNeighborCellUmtsEcIo() gets the Ec/Io (the received energy per chip divided by the
 *   power density in the band measured in dBm on the primary CPICH channel of serving cell) of the
 *   cell specified with the le_mrc_CellInfoRef_t parameter.
 * - le_mrc_GetNeighborCellLteIntraFreq() gets the RSRP and RSRQ of the Interfrequency of the cell
 *   specified with the le_mrc_CellInfoRef_t parameter.
 * - le_mrc_GetNeighborCellLteInterFreq() gets the RSRP and RSRQ of the Interfrequency of the cell
 *   specified with the le_mrc_CellInfoRef_t parameter.
 *
 * A sample code can be seen in the following page:
 * - @subpage c_mrcNeighborCells
 *
 *c_mrcNeighborCells
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

/**
 * @page c_mrcRadioPower Sample code for Radio Power Management
 *
 * @snippet "apps/test/modemServices/mrc/mrcIntegrationTest/mrcTest/le_mrcTest.c" Radio Power
 */

/**
 * @page c_mrcRadioConfigurationPreferences Sample code for Radio Configuration Preferences
 *
 * @snippet "apps/test/modemServices/mrc/mrcIntegrationTest/mrcTest/le_mrcTest.c" Band Preferences
 *
 */

/**
 * @page c_mrcRAT Sample code for Radio Access Technology
 *
 * @snippet "apps/test/modemServices/mrc/mrcIntegrationTest/mrcTest/le_mrcTest.c" RAT in Use
 * @snippet "apps/test/modemServices/mrc/mrcIntegrationTest/mrcTest/le_mrcTest.c" RAT Preferences
 *
 */

/**
 * @page c_mrcNetworkRegistration Sample code for Network Registration
 *
 * @snippet "apps/test/modemServices/mrc/mrcIntegrationTest/mrcTest/le_mrcTest.c" Register
 *
 */

/**
 * @page c_mrcQuality Sample code for Signal Quality
 *
 * @snippet "apps/test/modemServices/mrc/mrcIntegrationTest/mrcTest/le_mrcTest.c" Signal Quality
 *
 */

/**
 * @page c_mrcLocationinformation Sample code for Location information
 *
 * @snippet "apps/test/modemServices/mrc/mrcIntegrationTest/mrcTest/le_mrcTest.c" Loc information
 *
 */

/**
 * @page c_mrcBandCapabilities Sample code for Band Capabilities
 *
 * @snippet "apps/test/modemServices/mrc/mrcIntegrationTest/mrcTest/le_mrcTest.c" Band Capabilities
 *
 */

/**
 * @page c_mrcGetCurrentNetwork Sample code for Get Current Network Information
 *
 * @snippet "apps/test/modemServices/mrc/mrcIntegrationTest/mrcTest/le_mrcTest.c" Get Network
 *
 */

/**
 * @page c_mrcNetworkScan Sample code for Network Scan
 *
 * @snippet "apps/test/modemServices/mrc/mrcIntegrationTest/mrcTest/le_mrcTest.c" Network Scan
 *
 */

/**
 * @page c_mrcNeighborCells Sample code for Neighboring Cells Information
 *
 * @snippet "apps/test/modemServices/mrc/mrcIntegrationTest/mrcTest/le_mrcTest.c" Neighbor Cells
 *
 */


//--------------------------------------------------------------------------------------------------
/**
 * @file le_mrc_interface.h
 *
 * Legato @ref c_mrc include file.
 *
 * Copyright (C) Sierra Wireless Inc. Use of this work is subject to license.
 */
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
/**
 * Mobile Country Code length
 */
//--------------------------------------------------------------------------------------------------
DEFINE  MCC_LEN     = 3;             // Mobile Country Code length (without null terminator)

//--------------------------------------------------------------------------------------------------
/**
 * Mobile Country Code length
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  MCC_BYTES   = (MCC_LEN + 1); // Mobile Country Code length (with null terminator)

//--------------------------------------------------------------------------------------------------
/**
 * Mobile Network Code length
 */
//--------------------------------------------------------------------------------------------------
DEFINE  MNC_LEN     = 3;             // Mobile network Code length (without null terminator)

//--------------------------------------------------------------------------------------------------
/**
 * Mobile Network Code length
 * One extra byte is added for the null character.
 */
//--------------------------------------------------------------------------------------------------
DEFINE  MNC_BYTES   = (MNC_LEN + 1); // Mobile network Code length (with null terminator)

//--------------------------------------------------------------------------------------------------
/**
 * 2G/3G Band Bit Mask (64 bits)
 */
//--------------------------------------------------------------------------------------------------
BITMASK BandBitMask
{
    BITMASK_BAND_CLASS_0_A_SYSTEM,
    BITMASK_BAND_CLASS_0_B_SYSTEM,
    BITMASK_BAND_CLASS_1_ALL_BLOCKS,
    BITMASK_BAND_CLASS_2_PLACEHOLDER,
    BITMASK_BAND_CLASS_3_A_SYSTEM,
    BITMASK_BAND_CLASS_4_ALL_BLOCKS,
    BITMASK_BAND_CLASS_5_ALL_BLOCKS,
    BITMASK_BAND_CLASS_6,
    BITMASK_BAND_CLASS_7,
    BITMASK_BAND_CLASS_8,
    BITMASK_BAND_CLASS_9,
    BITMASK_BAND_CLASS_10,
    BITMASK_BAND_CLASS_11,
    BITMASK_BAND_CLASS_12,
    BITMASK_BAND_CLASS_14,
    BITMASK_BAND_CLASS_15,
    BITMASK_BAND_CLASS_16,
    BITMASK_BAND_CLASS_17,
    BITMASK_BAND_CLASS_18,
    BITMASK_BAND_CLASS_19,
    BITMASK_BAND_GSM_DCS_1800,
    BITMASK_BAND_EGSM_900,
    BITMASK_BAND_PRI_GSM_900,
    BITMASK_BAND_GSM_450,
    BITMASK_BAND_GSM_480,
    BITMASK_BAND_GSM_750,
    BITMASK_BAND_GSM_850,
    BITMASK_BAND_GSMR_900,
    BITMASK_BAND_GSM_PCS_1900,
    BITMASK_BAND_WCDMA_EU_J_CH_IMT_2100,
    BITMASK_BAND_WCDMA_US_PCS_1900,
    BITMASK_BAND_WCDMA_EU_CH_DCS_1800,
    BITMASK_BAND_WCDMA_US_1700,
    BITMASK_BAND_WCDMA_US_850,
    BITMASK_BAND_WCDMA_J_800,
    BITMASK_BAND_WCDMA_EU_2600,
    BITMASK_BAND_WCDMA_EU_J_900,
    BITMASK_BAND_WCDMA_J_1700
};

//--------------------------------------------------------------------------------------------------
/**
 * LTE Band Bit Mask (32bits)
 *
 */
//--------------------------------------------------------------------------------------------------
BITMASK LteBandBitMask
{
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_1,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_2,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_3,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_4,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_5,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_6,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_7,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_8,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_9,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_10,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_11,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_12,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_13,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_14,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_17,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_18,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_19,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_20,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_21,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_24,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_25,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_33,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_34,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_35,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_36,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_37,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_38,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_39,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_40,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_41,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_42,
    BITMASK_LTE_BAND_E_UTRA_OP_BAND_43
};

//--------------------------------------------------------------------------------------------------
/**
 * TDSCDMA Band Bit Mask
 *
 */
//--------------------------------------------------------------------------------------------------
BITMASK TdScdmaBandBitMask
{
    BITMASK_TDSCDMA_BAND_A,
    BITMASK_TDSCDMA_BAND_B,
    BITMASK_TDSCDMA_BAND_C,
    BITMASK_TDSCDMA_BAND_D,
    BITMASK_TDSCDMA_BAND_E,
    BITMASK_TDSCDMA_BAND_F
};


//--------------------------------------------------------------------------------------------------
/**
 * Cellular Network length.
 *
 */
//--------------------------------------------------------------------------------------------------
DEFINE  NETWORK_NAME_MAX_LEN = (100);


//--------------------------------------------------------------------------------------------------
/**
 * Reference type for referring to MRC Scan Information objects.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE ScanInformation;

//--------------------------------------------------------------------------------------------------
/**
 * Reference type for Scan Information Listing.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE ScanInformationList;

//--------------------------------------------------------------------------------------------------
/**
 * Reference type for referring to the Preferred Operator objects.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE PreferredOperator;

//--------------------------------------------------------------------------------------------------
/**
 * Reference type for Preferred Operator Listing.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE PreferredOperatorList;

//--------------------------------------------------------------------------------------------------
/**
 *  Reference type for one Cell Information.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE CellInfo;

//--------------------------------------------------------------------------------------------------
/**
 *  Reference type for all Neighboring Cells Information.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE NeighborCells;

//--------------------------------------------------------------------------------------------------
/**
 *  Reference type for the signal metrics.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Metrics;

//--------------------------------------------------------------------------------------------------
/**
 * Network Registration states.
 */
//--------------------------------------------------------------------------------------------------
ENUM NetRegState
{
    REG_NONE,           ///< Not registered and not currently searching for new operator.
    REG_HOME,           ///< Registered, home network.
    REG_SEARCHING,      ///< Not registered but currently searching for a new operator.
    REG_DENIED,         ///< Registration was denied, usually because of invalid access credentials.
    REG_ROAMING,        ///< Registered to a roaming network.
    REG_UNKNOWN         ///< Unknown state.
};


//--------------------------------------------------------------------------------------------------
/**
 * Radio Access Technology enum
 */
//--------------------------------------------------------------------------------------------------
ENUM Rat
{
    RAT_UNKNOWN,     ///< Unknown
    RAT_GSM,         ///< GSM network
    RAT_UMTS,        ///< UMTS network
    RAT_LTE,         ///< LTE network
    RAT_CDMA         ///< CDMA network
};


//--------------------------------------------------------------------------------------------------
/**
 * Radio Bitmask Access Technology Bit Mask
 */
//--------------------------------------------------------------------------------------------------
BITMASK RatBitMask
{
    BITMASK_RAT_GSM,    ///< GSM RAT Bit Mask
    BITMASK_RAT_UMTS,   ///< UMTS RAT Bit Mask
    BITMASK_RAT_LTE,    ///< LTE RAT Bit Mask
    BITMASK_RAT_CDMA,   ///< CDMA RAT Bit Mask
    BITMASK_RAT_ALL,    ///< To Set all RAT preference Bit Mask
    BITMASK_RAT_MAX
};


//--------------------------------------------------------------------------------------------------
/**
 * Handler for Network registration state changes.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER NetRegStateHandler
(
    NetRegState state ///< Parameter ready to receive the Network Registration state.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on network registration state changes.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
EVENT NetRegStateEvent
(
    NetRegStateHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for Radio Access Technology changes.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER RatChangeHandler
(
    Rat rat    ///< Parameter ready to receive the Radio Access Technology.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on Radio Access Technology changes.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
EVENT RatChange
(
    RatChangeHandler handler
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for Packet Switched service state changes.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER PacketSwitchedChangeHandler
(
    NetRegState state    ///< Parameter ready to receive the Packet Switched service state.
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on Packet Switched service changes.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
EVENT PacketSwitchedChange
(
    PacketSwitchedChangeHandler packetHandler
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for Signal Strength value changes.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER SignalStrengthChangeHandler
(
    int32   ss    ///< Signal strength in dBm
);

//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on Signal Strength value changes.
 *
 * @note <b>NOT multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
EVENT SignalStrengthChange
(
    Rat     rat IN,                       ///< Radio Access Technology
    int32   lowerRangeThreshold IN,       ///<  lower-range Signal strength threshold in dBm
    int32   upperRangeThreshold IN,       ///<  upper-range Signal strength threshold in dBm
    SignalStrengthChangeHandler handler
);


//--------------------------------------------------------------------------------------------------
/**
 * Handler for cellular asynchronous network scan Sending result.
 *  Returns the reference to the List object. Null pointer if the scan failed.
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER CellularNetworkScanHandler
(
    ScanInformationList listRef IN    ///< Reference to the List object. Null pointer if the
                                      ///< scan failed.
);

//--------------------------------------------------------------------------------------------------
/**
 * Handler for asynchronous manual selection response
 *
 */
//--------------------------------------------------------------------------------------------------
HANDLER ManualSelectionHandler
(
    le_result_t  result IN ///< Manual selection response
);


//--------------------------------------------------------------------------------------------------
/**
 * Enable the automatic Selection Register mode.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>NOT multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetAutomaticRegisterMode
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the manual Selection Register mode with the MCC/MNC parameters.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note If one code is too long (max LE_MRC_MCC_LEN/LE_MRC_MNC_LEN digits), it's a fatal error,
 *       the function won't return.
 *
 * @note <b>NOT multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetManualRegisterMode
(
    string mcc[MCC_LEN] IN,   ///< Mobile Country Code
    string mnc[MNC_LEN] IN    ///< Mobile Network Code
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the manual selection register mode asynchronously. This function is not blocking,
 *  the response will be returned with a handler function.
 *
 * @note If one code is too long (max LE_MRC_MCC_LEN/LE_MRC_MNC_LEN digits), it's a fatal error,
 *       the function won't return.
 *
 *@note <b>NOT multi-app safe</b>
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION SetManualRegisterModeAsync
(
    string mcc[MCC_LEN] IN,         ///< Mobile Country Code
    string mnc[MNC_LEN] IN,         ///< Mobile Network Code
    ManualSelectionHandler handler  ///< handler for sending result
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the selected Selection Register mode.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRegisterMode
(
    bool isManualPtr OUT, ///< true if the scan mode is manual, false if the scan mode is automatic.
    string mccPtr[MCC_LEN] OUT, ///< Mobile Country Code
    string mncPtr[MNC_LEN] OUT  ///< Mobile Network Code
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Packet Switched state.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetPacketSwitchedState
(
    NetRegState state OUT ///< The current Packet switched state.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the platform specific network registration error code.
 *
 * @return the platform specific registration error code
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION int32 GetPlatformSpecificRegistrationErrorCode
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the Radio Access Technology preferences by using a bit mask.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>NOT multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetRatPreferences
(
    RatBitMask ratMask IN ///< Bit mask for the Radio Access Technology preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Radio Access Technology preferences
 *
 * @return
 * - LE_FAULT  Function failed.
 * - LE_OK     Function succeeded.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRatPreferences
(
    RatBitMask ratMaskPtr OUT ///< Bit mask for the Radio Access Technology preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the 2G/3G Band preferences by using a bit mask.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>NOT multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetBandPreferences
(
    BandBitMask bandMask IN ///< Bit mask for 2G/3G Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Bit mask for 2G/3G Band preferences.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetBandPreferences
(
    BandBitMask bandMaskPtr OUT ///< Bit mask for 2G/3G Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the LTE Band preferences by using a bit mask.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>NOT multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetLteBandPreferences
(
    LteBandBitMask bandMask IN ///< Bit mask for LTE Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Bit mask for LTE Band preferences.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetLteBandPreferences
(
    LteBandBitMask bandMaskPtr OUT ///< Bit mask for LTE Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the TD-SCDMA Band preferences by using a bit mask.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>NOT multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetTdScdmaBandPreferences
(
    TdScdmaBandBitMask bandMask IN ///< Bit mask for TD-SCDMA Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Bit mask for TD-SCDMA Band preferences.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetTdScdmaBandPreferences
(
    TdScdmaBandBitMask bandMaskPtr OUT ///< Bit mask for TD-SCDMA Band preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Add a preferred operator by specifying the MCC/MNC and the Radio Access Technology.
 *
 * @return
 *  - LE_UNSUPPORTED   List of User Preferred operators not available.
 *  - LE_FAULT         Function failed.
 *  - LE_BAD_PARAMETER RAT mask is invalid.
 *  - LE_OK            Function succeeded.
 *
 * @note If one code is too long (max LE_MRC_MCC_LEN/LE_MRC_MNC_LEN digits) or not set,
 *       it's a fatal error and the function won't return.
 *
 * @note <b>NOT multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t AddPreferredOperator
(
    string     mcc[MCC_LEN]  IN,   ///< Mobile Country Code
    string     mnc[MNC_LEN]  IN,   ///< Mobile Network Code
    RatBitMask ratMask IN          ///< Bit mask for the Radio Access Technology preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Remove a preferred operator by specifying the MCC/MNC.
 *
 * @return
 *  - LE_UNSUPPORTED    List of User Preferred operators not available.
 *  - LE_NOT_FOUND      Operator not found in the User Preferred operators list.
 *  - LE_FAULT          Function failed.
 *  - LE_OK             Function succeeded.
 *
 * @note If one code is too long (max LE_MRC_MCC_LEN/LE_MRC_MNC_LEN digits) or not set,
 *       it's a fatal error and the function won't return.
 *
 * @note <b>NOT multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RemovePreferredOperator
(
    string     mcc[MCC_LEN]  IN,     ///< Mobile Country Code
    string     mnc[MNC_LEN]  IN      ///< Mobile Network Code
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to retrieve a list of the preferred operators.
 *
 * @return
 * - Reference to the List object.
 * - Null pointer if there is no preferences list.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION PreferredOperatorList GetPreferredOperatorsList
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the first Operator object reference in the list of the
 * preferred operators retrieved with le_mrc_GetPreferredOperators().
 *
 * @return
 *  - NULL                          No operator information found.
 *  - le_mrc_PreferredOperatorRef   The Operator object reference.
 *
 * @note If the caller is passing a bad reference into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION PreferredOperator GetFirstPreferredOperator
(
    PreferredOperatorList  preferredOperatorListRef ///< The list of the preferred operators.
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the next Operator object reference in the list of the
 * preferred operators retrieved with le_mrc_GetPreferredOperators().
 *
 * @return
 *  - NULL                          No operator information found.
 *  - le_mrc_PreferredOperatorRef   The Operator object reference.
 *
 * @note If the caller is passing a bad reference into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION PreferredOperator GetNextPreferredOperator
(
    PreferredOperatorList  preferredOperatorListRef ///< The list of the preferred operators.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to delete the list of the preferred operators retrieved with
 * le_mrc_GetPreferredOperators().
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DeletePreferredOperatorsList
(
    PreferredOperatorList  preferredOperatorListRef ///< The list of the preferred operators.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Operator information details.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the MCC or MNC would not fit in buffer
 *      - LE_FAULT for all other errors
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetPreferredOperatorDetails
(
    PreferredOperator  preferredOperatorRef, ///< Operator object reference.
    string             mccPtr[MCC_LEN] OUT,  ///< Mobile Country Code.
    string             mncPtr[MNC_LEN] OUT,  ///< Mobile Network Code.
    RatBitMask         ratMask   OUT         ///< Bit mask for the RAT preferences.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the network registration state.
 *
 * @return LE_FAULT         The function failed to get the Network registration state.
 * @return LE_BAD_PARAMETER A bad parameter was passed.
 * @return LE_OK            The function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetNetRegState
(
    NetRegState state OUT  ///< Network Registration state.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the signal quality.
 *
 * @return LE_FAULT         The function failed to get the Signal Quality information.
 * @return LE_BAD_PARAMETER A bad parameter was passed.
 * @return LE_OK            The function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetSignalQual
(
    uint32 quality OUT      ///< [OUT] Received signal strength quality (0 = no signal strength,
                            ///<        5 = very good signal strength).
);

//--------------------------------------------------------------------------------------------------
/**
 * Set the power of the Radio Module.
 *
 * @return LE_BAD_PARAMETER Bad power mode specified.
 * @return LE_FAULT         Function failed.
 * @return LE_OK            Function succeed.
 *
 * @note <b>NOT multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetRadioPower
(
    le_onoff_t power ///< The power state.
);

//--------------------------------------------------------------------------------------------------
/**
 * Must be called to get the Radio Module power state.
 *
 * @return LE_FAULT         The function failed to get the Radio Module power state.
 * @return LE_BAD_PARAMETER if powerPtr is NULL.
 * @return LE_OK            The function succeed.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRadioPower
(
    le_onoff_t power OUT ///< Power state.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to perform a cellular network scan.
 *
 * @return Reference to the List object. Null pointer if the scan failed.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ScanInformationList PerformCellularNetworkScan
(
    RatBitMask ratMask ///< Radio Access Technology mask
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to perform a cellular network scan asynchronously. This function
 * is not blocking, the response will be returned with a handler function.
 *
 *@note <b>multi-app safe</b>
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION PerformCellularNetworkScanAsync
(
    RatBitMask ratMask IN,               ///< Radio Access Technology mask
    CellularNetworkScanHandler handler   ///< handler for sending result.
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the first Scan Information object reference in the list of
 * scan Information retrieved with le_mrc_PerformCellularNetworkScan().
 *
 * @return NULL                         No scan information found.
 * @return le_mrc_ScanInformationRef_t  The Scan Information object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ScanInformation GetFirstCellularNetworkScan
(
    ScanInformationList  scanInformationListRef ///< The list of scan information.
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the next Scan Information object reference in the list of
 * scan Information retrieved with le_mrc_PerformCellularNetworkScan().
 *
 * @return NULL                         No scan information found.
 * @return le_mrc_ScanInformationRef_t  The Scan Information object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ScanInformation GetNextCellularNetworkScan
(
    ScanInformationList  scanInformationListRef ///< The list of scan information.
);


//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to delete the list of the Scan Information retrieved with
 * le_mrc_PerformCellularNetworkScan().
 *
 * @note
 *      On failure, the process exits, so you don't have to worry about checking the returned
 *      reference for validity.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DeleteCellularNetworkScan
(
    ScanInformationList  scanInformationListRef ///< The list of scan information.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Cellular Network Code [mcc:mnc]
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the MCC or MNC would not fit in buffer
 *      - LE_FAULT for all other errors
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCellularNetworkMccMnc
(
    ScanInformation scanInformationRef,     ///< Scan information reference
    string mccPtr[MCC_LEN] OUT,             ///< Mobile Country Code
    string mncPtr[MNC_LEN] OUT              ///< Mobile Network Code
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Cellular Network Name.
 *
 * @return
 *      - LE_OK on success
 *      - LE_OVERFLOW if the operator name would not fit in buffer
 *      - LE_FAULT for all other errors
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCellularNetworkName
(
    ScanInformation scanInformationRef,        ///< Scan information reference
    string namePtr[NETWORK_NAME_MAX_LEN] OUT   ///< Name of operator
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the radio access technology of a scanInformationRef.
 *
 * @return the radio access technology
 *
 * @note On failure, the process exits.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Rat GetCellularNetworkRat
(
    ScanInformation scanInformationRef     ///< Scan information reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is currently in use.
 *
 * @return true     The network is in use
 * @return false    The network isn't in use
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkInUse
(
    ScanInformation scanInformationRef ///< Scan information reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is available.
 *
 * @return true     The network is available
 * @return false    The network isn't available
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkAvailable
(
    ScanInformation scanInformationRef ///< Scan information reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is currently in home mode.
 *
 * @return true     The network is home
 * @return false    The network is roaming
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkHome
(
    ScanInformation scanInformationRef ///< Scan information reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to check if a cellular network is forbidden by the operator.
 *
 * @return true     The network is forbidden
 * @return false    The network is allowed
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION bool IsCellularNetworkForbidden
(
    ScanInformation scanInformationRef ///< Scan information reference
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the current network name information.
 *
 * @return
 *      - LE_OK             on success
 *      - LE_BAD_PARAMETER  if nameStr is NULL
 *      - LE_OVERFLOW       if the Home Network Name can't fit in nameStr
 *      - LE_FAULT          on any other failure
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCurrentNetworkName
(
    string nameStr[NETWORK_NAME_MAX_LEN] OUT     ///< the home network Name
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the current network PLMN information.
 *
 * @return
 *      - LE_OK       on success
 *      - LE_FAULT    on any other failure
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCurrentNetworkMccMnc
(
    string mccStr[MCC_LEN] OUT,     ///< the mobile country code
    string mncStr[MNC_LEN] OUT      ///< the mobile network code
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the current Radio Access Technology in use.
 *
 * @return LE_FAULT         Function failed to get the Radio Access Technology.
 * @return LE_BAD_PARAMETER A bad parameter was passed.
 * @return LE_OK            Function succeeded.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetRadioAccessTechInUse
(
    Rat   rat  OUT     ///< The Radio Access Technology.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to retrieve the Neighboring Cells information. It creates and
 * returns a reference to the Neighboring Cells information.
 *
 * @return A reference to the Neighboring Cells information.
 * @return NULL if no Cells Information are available.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION NeighborCells GetNeighborCellsInfo
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to delete the Neighboring Cells information.
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DeleteNeighborCellsInfo
(
    NeighborCells ngbrCellsRef IN  ///< Neighboring Cells reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the first Cell Information reference in the list of
 * Neighboring Cells information retrieved with le_mrc_GetNeighborCellsInfo().
 *
 * @return NULL                   No Cell information object found.
 * @return le_mrc_CellInfoRef_t   The Cell information object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION CellInfo GetFirstNeighborCellInfo
(
    NeighborCells ngbrCellsRef IN  ///< Neighboring Cells reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the next Cell Information reference in the list of
 * Neighboring Cells information retrieved with le_mrc_GetNeighborCellsInfo().
 *
 * @return NULL                   No Cell information object found.
 * @return le_mrc_CellInfoRef_t   Cell information object reference.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION CellInfo GetNextNeighborCellInfo
(
    NeighborCells ngbrCellsRef IN  ///< Neighboring Cells reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Cell Identifier.
 *
 * @return The Cell Identifier.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 GetNeighborCellId
(
    CellInfo     ngbrCellInfoRef IN    ///< Cell information reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Location Area Code of a cell.
 *
 * @return The Location Area Code of a cell. 0xFFFF value is returned if the value is not available.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 GetNeighborCellLocAreaCode
(
    CellInfo     ngbrCellInfoRef IN    ///< Cell information reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the signal strength of a cell.
 *
 * @return The signal strength of a cell in dBm.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION int32 GetNeighborCellRxLevel
(
    CellInfo     ngbrCellInfoRef IN    ///< Cell information reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Radio Access Technology of a cell.
 *
 * @return The Radio Access Technology of a cell.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Rat GetNeighborCellRat
(
    CellInfo     ngbrCellInfoRef IN    ///< Cell information reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Ec/Io; the received energy per chip divided by the power
 * density in the band measured in dBm on the primary CPICH channel of serving cell.
 *
 * @return
 *  - The Ec/Io of a cell given in dB with 1 decimal place. (only applicable for UMTS network).
 *  - 0xFFFFFFFF when the value isn't available.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION int32 GetNeighborCellUmtsEcIo
(
    CellInfo     ngbrCellInfoRef IN    ///< Cell information reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the RSRP and RSRQ of the Intrafrequency of a LTE cell.
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetNeighborCellLteIntraFreq
(
    CellInfo  ngbrCellInfoRef IN,  ///< Cell information reference.
    int32     rsrq            OUT, ///< Reference Signal Received Quality value in dB with 1 decimal
                                   ///< place
    int32     rsrp            OUT  ///< Reference Signal Receiver Power value in dBm with 1 decimal
                                   ///< place
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the RSRP and RSRQ of the Interfrequency of a LTE cell.
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetNeighborCellLteInterFreq
(
    CellInfo  ngbrCellInfoRef IN,  ///< Cell information reference.
    int32     rsrq            OUT, ///< Reference Signal Received Quality value in dB with 1 decimal
                                   ///< place
    int32     rsrp            OUT  ///< Reference Signal Receiver Power value in dBm with 1 decimal
                                   ///< place
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to measure the signal metrics. It creates and returns a reference
 * to the signal metrics.
 *
 * @return A reference to the signal metrics.
 * @return NULL if no signal metrics are available.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Metrics MeasureSignalMetrics
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to delete the the signal metrics.
 *
 * @note On failure, the process exits, so you don't have to worry about checking the returned
 *       reference for validity.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DeleteSignalMetrics
(
    Metrics  MetricsRef IN  ///< Signal metrics reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function returns the Radio Access Technology of the signal metrics.
 *
 * @return The Radio Access Technology of the signal measure.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Rat GetRatOfSignalMetrics
(
    Metrics  MetricsRef IN  ///< Signal metrics reference.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function returns the signal strength in dBm and the bit error rate measured on GSM network.
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetGsmSignalMetrics
(
    Metrics  MetricsRef IN,  ///< Signal metrics reference.
    int32    rssi       OUT, ///< Signal strength in dBm
    uint32   ber        OUT  ///< Bit error rate.
);

//--------------------------------------------------------------------------------------------------
/**
 * This function returns the signal metrics measured on UMTS network.
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetUmtsSignalMetrics
(
    Metrics  MetricsRef IN,  ///< Signal metrics reference.
    int32    ss         OUT, ///< Signal strength in dBm
    uint32   bler       OUT, ///< Block error rate
    int32    ecio       OUT, ///< Ec/Io value  in dB with 1 decimal place (15 = 1.5 dB)
    int32    rscp       OUT, ///< Measured RSCP in dBm (only applicable for TD-SCDMA network)
    int32    sinr       OUT  ///< Measured SINR in dB (only applicable for TD-SCDMA network)
);

//--------------------------------------------------------------------------------------------------
/**
 * This function returns the signal metrics measured on LTE network.
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 *      - sinrPtr and ioPtr return 0xFFFFFFFF when the value isn't available.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetLteSignalMetrics
(
    Metrics  MetricsRef IN,  ///< Signal metrics reference.
    int32    ss         OUT, ///< Signal strength in dBm
    uint32   bler       OUT, ///< Block error rate
    int32    rsrq       OUT, ///< RSRQ value in dB as measured by L1 with 1 decimal place
    int32    rsrp       OUT, ///< Current RSRP in dBm as measured by L1 with 1 decimal place
    int32    snr        OUT  ///< SNR level in dB with 1 decimal place (15 = 1.5 dB)
);

//--------------------------------------------------------------------------------------------------
/**
 * This function returns the signal metrics measured on CDMA network.
 *
 * @return
 *      - LE_OK on success
 *      - LE_FAULT on failure
 *      - rscpPtr and sinrPtr return 0xFFFFFFFF when the value isn't available.
 *
 * @note If the caller is passing a bad pointer into this function, it's a fatal error, the
 *       function won't return.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetCdmaSignalMetrics
(
    Metrics MetricsRef IN,  ///< Signal metrics reference.
    int32   ss         OUT, ///< Signal strength in dBm
    uint32  er         OUT, ///< Frame/Packet error rate
    int32   ecio       OUT, ///< ECIO value in dB with 1 decimal place (15 = 1.5 dB)
    int32   sinr       OUT, ///< SINR level in dB with 1 decimal place, (only applicable for 1xEV-DO).
    int32   io         OUT  ///< Received IO in dBm (only applicable for 1xEV-DO)
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the serving Cell Identifier.
 *
 * @return The Cell Identifier. 0xFFFFFFFF value is returned if the value is not available.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 GetServingCellId
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Location Area Code of the serving cell.
 *
 * @return The Location Area Code. 0xFFFFFFFF value is returned if the value is not available.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint32 GetServingCellLocAreaCode
(
);

//--------------------------------------------------------------------------------------------------
/**
 * This function must be called to get the Tracking Area Code of the serving cell (LTE only).
 *
 * @return The Tracking Area Code. 0xFFFF value is returned if the value is not available.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION uint16 GetServingCellLteTracAreaCode
(
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Bit mask for 2G/3G Band capabilities.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetBandCapabilities
(
    BandBitMask bandMaskPtr OUT ///< Bit mask for 2G/3G Band capabilities.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Bit mask for LTE Band capabilities.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetLteBandCapabilities
(
    LteBandBitMask bandMaskPtr OUT ///< Bit mask for LTE Band capabilities.
);

//--------------------------------------------------------------------------------------------------
/**
 * Get the Bit mask for TD-SCDMA Band capabilities.
 *
 * @return
 *  - LE_FAULT  Function failed.
 *  - LE_OK     Function succeeded.
 *
 * @note <b>multi-app safe</b>
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetTdScdmaBandCapabilities
(
    TdScdmaBandBitMask bandMaskPtr OUT ///< Bit mask for TD-SCDMA Band capabilities.
);

